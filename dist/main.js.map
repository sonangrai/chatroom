{"version":3,"sources":["../src/main.js"],"names":["express","require","Server","http","path","dbConnect","config","app","server","createServer","io","transports","cors","origin","on","socket","data","emit","use","req","res","next","process","env","NODE_ENV","static","get","sendFile","resolve","__dirname","json","extended","port","PORT","listen","console","log"],"mappings":";;AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,WAAD,CAA1B;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,oBAAD,CAAzB;;AACAA,OAAO,CAAC,QAAD,CAAP,CAAkBK,MAAlB;;AAEA,MAAMC,GAAG,GAAGP,OAAO,EAAnB,C,CAEA;;AACA,MAAMQ,MAAM,GAAGL,IAAI,CAACM,YAAL,CAAkBF,GAAlB,CAAf,C,CACA;;AACA,MAAMG,EAAE,GAAG,IAAIR,MAAJ,CAAWM,MAAX,EAAmB;AAC5BG,EAAAA,UAAU,EAAE,CAAC,SAAD,CADgB;AAE5BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE;AADJ;AAFsB,CAAnB,CAAX;AAOA;AACA;AACA;;AACAH,EAAE,CAACI,EAAH,CAAM,YAAN,EAAqBC,MAAD,IAAY;AAC9BA,EAAAA,MAAM,CAACD,EAAP,CAAU,WAAV,EAAwBE,IAAD,IAAU;AAC/BN,IAAAA,EAAE,CAACO,IAAH,CAAQ,gBAAR,EAA0BD,IAA1B;AACD,GAFD;AAGD,CAJD,E,CAMA;AACA;;AACAT,GAAG,CAACW,GAAJ,CAAQ,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAChCD,EAAAA,GAAG,CAACV,EAAJ,GAASA,EAAT;AACAW,EAAAA,IAAI;AACL,CAHD,E,CAKA;;AACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACAjB,EAAAA,GAAG,CAACW,GAAJ,CAAQlB,OAAO,CAACyB,MAAR,CAAe,YAAf,CAAR;AAEAlB,EAAAA,GAAG,CAACmB,GAAJ,CAAQ,GAAR,EAAa,CAACP,GAAD,EAAMC,GAAN,KAAc;AACzBA,IAAAA,GAAG,CAACO,QAAJ,CAAavB,IAAI,CAACwB,OAAL,CAAaC,SAAb,EAAwB,yBAAxB,CAAb;AACD,GAFD;AAGD,C,CAED;;;AACAxB,SAAS,G,CAET;;AACAE,GAAG,CAACW,GAAJ,CAAQlB,OAAO,CAAC8B,IAAR,CAAa;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAb,CAAR;AAEA;AACA;AACA;;AACAxB,GAAG,CAACW,GAAJ,CAAQ,MAAR,EAAgBjB,OAAO,CAAC,gBAAD,CAAvB;AACAM,GAAG,CAACW,GAAJ,CAAQ,MAAR,EAAgBjB,OAAO,CAAC,mBAAD,CAAvB;AAEA;AACA;AACA;;AACA,MAAM+B,IAAI,GAAGV,OAAO,CAACC,GAAR,CAAYU,IAAZ,IAAoB,IAAjC;AACAzB,MAAM,CAAC0B,MAAP,CAAcF,IAAd,EAAoB,MAAM;AACxBG,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BJ,IAA9B;AACD,CAFD","sourcesContent":["const express = require(\"express\");\nconst { Server } = require(\"socket.io\");\nconst http = require(\"http\");\nconst path = require(\"path\");\nconst dbConnect = require(\"../utils/dbConnect\");\nrequire(\"dotenv\").config();\n\nconst app = express();\n\n//Creating an http server\nconst server = http.createServer(app);\n//Implemented the server in the socket\nconst io = new Server(server, {\n  transports: [\"polling\"],\n  cors: {\n    origin: \"*\",\n  },\n});\n\n/**\n * The connection event\n */\nio.on(\"connection\", (socket) => {\n  socket.on(\"connected\", (data) => {\n    io.emit(\"user connected\", data);\n  });\n});\n\n//Exporting io\n//exports.io = io;\napp.use(function (req, res, next) {\n  res.io = io;\n  next();\n});\n\n// Serve static assets in production\nif (process.env.NODE_ENV === \"production\") {\n  // Set static folder\n  app.use(express.static(\"chat/build\"));\n\n  app.get(\"*\", (req, res) => {\n    res.sendFile(path.resolve(__dirname, \"./chat/build/index.html\"));\n  });\n}\n\n//Connecting to db\ndbConnect();\n\n//Validating json usage\napp.use(express.json({ extended: false }));\n\n/**\n * Declaring routes\n */\napp.use(\"/api\", require(\"../routes/User\"));\napp.use(\"/api\", require(\"../routes/Message\"));\n\n/**\n * Main server\n */\nconst port = process.env.PORT || 4000;\nserver.listen(port, () => {\n  console.log(\"App running in\", port);\n});\n"],"file":"main.js"}